# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from eleven_labs_python_sdk.pydantic.fine_tuning_response_model import FineTuningResponseModel
from eleven_labs_python_sdk.pydantic.sample_response_model import SampleResponseModel
from eleven_labs_python_sdk.pydantic.voice_response_model_available_for_tiers import VoiceResponseModelAvailableForTiers
from eleven_labs_python_sdk.pydantic.voice_response_model_high_quality_base_model_ids import VoiceResponseModelHighQualityBaseModelIds
from eleven_labs_python_sdk.pydantic.voice_response_model_labels import VoiceResponseModelLabels
from eleven_labs_python_sdk.pydantic.voice_settings_response_model import VoiceSettingsResponseModel
from eleven_labs_python_sdk.pydantic.voice_sharing_response_model import VoiceSharingResponseModel
from eleven_labs_python_sdk.pydantic.voice_verification_response_model import VoiceVerificationResponseModel

class VoiceResponseModel(BaseModel):
    description: str = Field(alias='description')

    voice_id: str = Field(alias='voice_id')

    name: str = Field(alias='name')

    samples: typing.List[SampleResponseModel] = Field(alias='samples')

    category: str = Field(alias='category')

    fine_tuning: FineTuningResponseModel = Field(alias='fine_tuning')

    labels: VoiceResponseModelLabels = Field(alias='labels')

    preview_url: str = Field(alias='preview_url')

    available_for_tiers: VoiceResponseModelAvailableForTiers = Field(alias='available_for_tiers')

    settings: VoiceSettingsResponseModel = Field(alias='settings')

    sharing: VoiceSharingResponseModel = Field(alias='sharing')

    high_quality_base_model_ids: VoiceResponseModelHighQualityBaseModelIds = Field(alias='high_quality_base_model_ids')

    safety_control: typing.Optional[Literal["NONE", "BAN", "CAPTCHA", "CAPTCHA_AND_MODERATION"]] = Field(None, alias='safety_control')

    voice_verification: typing.Optional[VoiceVerificationResponseModel] = Field(None, alias='voice_verification')
    class Config:
        arbitrary_types_allowed = True
