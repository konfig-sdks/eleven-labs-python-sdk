# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from eleven_labs_python_sdk.pydantic.fine_tuning_response_model_finetuning_progress import FineTuningResponseModelFinetuningProgress
from eleven_labs_python_sdk.pydantic.fine_tuning_response_model_slice_ids import FineTuningResponseModelSliceIds
from eleven_labs_python_sdk.pydantic.fine_tuning_response_model_verification_failures import FineTuningResponseModelVerificationFailures
from eleven_labs_python_sdk.pydantic.manual_verification_response_model import ManualVerificationResponseModel
from eleven_labs_python_sdk.pydantic.verification_attempt_response_model import VerificationAttemptResponseModel

class FineTuningResponseModel(BaseModel):
    is_allowed_to_fine_tune: bool = Field(alias='is_allowed_to_fine_tune')

    finetuning_state: Literal["not_started", "queued", "fine_tuning", "fine_tuned", "failed", "delayed"] = Field(alias='finetuning_state')

    verification_failures: FineTuningResponseModelVerificationFailures = Field(alias='verification_failures')

    verification_attempts_count: int = Field(alias='verification_attempts_count')

    manual_verification_requested: bool = Field(alias='manual_verification_requested')

    language: typing.Optional[str] = Field(None, alias='language')

    finetuning_progress: typing.Optional[FineTuningResponseModelFinetuningProgress] = Field(None, alias='finetuning_progress')

    message: typing.Optional[str] = Field(None, alias='message')

    dataset_duration_seconds: typing.Optional[typing.Union[int, float]] = Field(None, alias='dataset_duration_seconds')

    verification_attempts: typing.Optional[typing.List[VerificationAttemptResponseModel]] = Field(None, alias='verification_attempts')

    slice_ids: typing.Optional[FineTuningResponseModelSliceIds] = Field(None, alias='slice_ids')

    manual_verification: typing.Optional[ManualVerificationResponseModel] = Field(None, alias='manual_verification')
    class Config:
        arbitrary_types_allowed = True
