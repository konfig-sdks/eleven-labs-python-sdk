# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class FeedbackResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "feedback",
            "audio_quality",
            "other",
            "emotions",
            "glitches",
            "inaccurate_clone",
            "thumbs_up",
        }
        
        class properties:
            thumbs_up = schemas.BoolSchema
            feedback = schemas.StrSchema
            emotions = schemas.BoolSchema
            inaccurate_clone = schemas.BoolSchema
            glitches = schemas.BoolSchema
            audio_quality = schemas.BoolSchema
            other = schemas.BoolSchema
            review_status = schemas.StrSchema
            __annotations__ = {
                "thumbs_up": thumbs_up,
                "feedback": feedback,
                "emotions": emotions,
                "inaccurate_clone": inaccurate_clone,
                "glitches": glitches,
                "audio_quality": audio_quality,
                "other": other,
                "review_status": review_status,
            }
    
    feedback: MetaOapg.properties.feedback
    audio_quality: MetaOapg.properties.audio_quality
    other: MetaOapg.properties.other
    emotions: MetaOapg.properties.emotions
    glitches: MetaOapg.properties.glitches
    inaccurate_clone: MetaOapg.properties.inaccurate_clone
    thumbs_up: MetaOapg.properties.thumbs_up
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbs_up"]) -> MetaOapg.properties.thumbs_up: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback"]) -> MetaOapg.properties.feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emotions"]) -> MetaOapg.properties.emotions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inaccurate_clone"]) -> MetaOapg.properties.inaccurate_clone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["glitches"]) -> MetaOapg.properties.glitches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio_quality"]) -> MetaOapg.properties.audio_quality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_status"]) -> MetaOapg.properties.review_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["thumbs_up", "feedback", "emotions", "inaccurate_clone", "glitches", "audio_quality", "other", "review_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbs_up"]) -> MetaOapg.properties.thumbs_up: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback"]) -> MetaOapg.properties.feedback: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emotions"]) -> MetaOapg.properties.emotions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inaccurate_clone"]) -> MetaOapg.properties.inaccurate_clone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["glitches"]) -> MetaOapg.properties.glitches: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio_quality"]) -> MetaOapg.properties.audio_quality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["other"]) -> MetaOapg.properties.other: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_status"]) -> typing.Union[MetaOapg.properties.review_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["thumbs_up", "feedback", "emotions", "inaccurate_clone", "glitches", "audio_quality", "other", "review_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        feedback: typing.Union[MetaOapg.properties.feedback, str, ],
        audio_quality: typing.Union[MetaOapg.properties.audio_quality, bool, ],
        other: typing.Union[MetaOapg.properties.other, bool, ],
        emotions: typing.Union[MetaOapg.properties.emotions, bool, ],
        glitches: typing.Union[MetaOapg.properties.glitches, bool, ],
        inaccurate_clone: typing.Union[MetaOapg.properties.inaccurate_clone, bool, ],
        thumbs_up: typing.Union[MetaOapg.properties.thumbs_up, bool, ],
        review_status: typing.Union[MetaOapg.properties.review_status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FeedbackResponseModel':
        return super().__new__(
            cls,
            *args,
            feedback=feedback,
            audio_quality=audio_quality,
            other=other,
            emotions=emotions,
            glitches=glitches,
            inaccurate_clone=inaccurate_clone,
            thumbs_up=thumbs_up,
            review_status=review_status,
            _configuration=_configuration,
            **kwargs,
        )
