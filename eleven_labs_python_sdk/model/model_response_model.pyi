# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class ModelResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "can_use_style",
            "token_cost_factor",
            "languages",
            "can_do_text_to_speech",
            "description",
            "max_characters_request_free_user",
            "max_characters_request_subscribed_user",
            "model_id",
            "can_be_finetuned",
            "serves_pro_voices",
            "can_do_voice_conversion",
            "can_use_speaker_boost",
            "name",
            "requires_alpha_access",
        }
        
        class properties:
            description = schemas.StrSchema
            model_id = schemas.StrSchema
            name = schemas.StrSchema
            can_be_finetuned = schemas.BoolSchema
            can_do_text_to_speech = schemas.BoolSchema
            can_do_voice_conversion = schemas.BoolSchema
            can_use_style = schemas.BoolSchema
            can_use_speaker_boost = schemas.BoolSchema
            serves_pro_voices = schemas.BoolSchema
            token_cost_factor = schemas.NumberSchema
            requires_alpha_access = schemas.BoolSchema
            max_characters_request_free_user = schemas.IntSchema
            max_characters_request_subscribed_user = schemas.IntSchema
            
            
            class languages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LanguageResponseModel']:
                        return LanguageResponseModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['LanguageResponseModel'], typing.List['LanguageResponseModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'languages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LanguageResponseModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "model_id": model_id,
                "name": name,
                "can_be_finetuned": can_be_finetuned,
                "can_do_text_to_speech": can_do_text_to_speech,
                "can_do_voice_conversion": can_do_voice_conversion,
                "can_use_style": can_use_style,
                "can_use_speaker_boost": can_use_speaker_boost,
                "serves_pro_voices": serves_pro_voices,
                "token_cost_factor": token_cost_factor,
                "requires_alpha_access": requires_alpha_access,
                "max_characters_request_free_user": max_characters_request_free_user,
                "max_characters_request_subscribed_user": max_characters_request_subscribed_user,
                "languages": languages,
            }
    
    can_use_style: MetaOapg.properties.can_use_style
    token_cost_factor: MetaOapg.properties.token_cost_factor
    languages: MetaOapg.properties.languages
    can_do_text_to_speech: MetaOapg.properties.can_do_text_to_speech
    description: MetaOapg.properties.description
    max_characters_request_free_user: MetaOapg.properties.max_characters_request_free_user
    max_characters_request_subscribed_user: MetaOapg.properties.max_characters_request_subscribed_user
    model_id: MetaOapg.properties.model_id
    can_be_finetuned: MetaOapg.properties.can_be_finetuned
    serves_pro_voices: MetaOapg.properties.serves_pro_voices
    can_do_voice_conversion: MetaOapg.properties.can_do_voice_conversion
    can_use_speaker_boost: MetaOapg.properties.can_use_speaker_boost
    name: MetaOapg.properties.name
    requires_alpha_access: MetaOapg.properties.requires_alpha_access
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_finetuned"]) -> MetaOapg.properties.can_be_finetuned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_do_text_to_speech"]) -> MetaOapg.properties.can_do_text_to_speech: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_do_voice_conversion"]) -> MetaOapg.properties.can_do_voice_conversion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_use_style"]) -> MetaOapg.properties.can_use_style: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_use_speaker_boost"]) -> MetaOapg.properties.can_use_speaker_boost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serves_pro_voices"]) -> MetaOapg.properties.serves_pro_voices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token_cost_factor"]) -> MetaOapg.properties.token_cost_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requires_alpha_access"]) -> MetaOapg.properties.requires_alpha_access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_characters_request_free_user"]) -> MetaOapg.properties.max_characters_request_free_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_characters_request_subscribed_user"]) -> MetaOapg.properties.max_characters_request_subscribed_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languages"]) -> MetaOapg.properties.languages: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "model_id", "name", "can_be_finetuned", "can_do_text_to_speech", "can_do_voice_conversion", "can_use_style", "can_use_speaker_boost", "serves_pro_voices", "token_cost_factor", "requires_alpha_access", "max_characters_request_free_user", "max_characters_request_subscribed_user", "languages", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_finetuned"]) -> MetaOapg.properties.can_be_finetuned: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_do_text_to_speech"]) -> MetaOapg.properties.can_do_text_to_speech: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_do_voice_conversion"]) -> MetaOapg.properties.can_do_voice_conversion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_use_style"]) -> MetaOapg.properties.can_use_style: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_use_speaker_boost"]) -> MetaOapg.properties.can_use_speaker_boost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serves_pro_voices"]) -> MetaOapg.properties.serves_pro_voices: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token_cost_factor"]) -> MetaOapg.properties.token_cost_factor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requires_alpha_access"]) -> MetaOapg.properties.requires_alpha_access: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_characters_request_free_user"]) -> MetaOapg.properties.max_characters_request_free_user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_characters_request_subscribed_user"]) -> MetaOapg.properties.max_characters_request_subscribed_user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languages"]) -> MetaOapg.properties.languages: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "model_id", "name", "can_be_finetuned", "can_do_text_to_speech", "can_do_voice_conversion", "can_use_style", "can_use_speaker_boost", "serves_pro_voices", "token_cost_factor", "requires_alpha_access", "max_characters_request_free_user", "max_characters_request_subscribed_user", "languages", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        can_use_style: typing.Union[MetaOapg.properties.can_use_style, bool, ],
        token_cost_factor: typing.Union[MetaOapg.properties.token_cost_factor, decimal.Decimal, int, float, ],
        languages: typing.Union[MetaOapg.properties.languages, list, tuple, ],
        can_do_text_to_speech: typing.Union[MetaOapg.properties.can_do_text_to_speech, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        max_characters_request_free_user: typing.Union[MetaOapg.properties.max_characters_request_free_user, decimal.Decimal, int, ],
        max_characters_request_subscribed_user: typing.Union[MetaOapg.properties.max_characters_request_subscribed_user, decimal.Decimal, int, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, ],
        can_be_finetuned: typing.Union[MetaOapg.properties.can_be_finetuned, bool, ],
        serves_pro_voices: typing.Union[MetaOapg.properties.serves_pro_voices, bool, ],
        can_do_voice_conversion: typing.Union[MetaOapg.properties.can_do_voice_conversion, bool, ],
        can_use_speaker_boost: typing.Union[MetaOapg.properties.can_use_speaker_boost, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        requires_alpha_access: typing.Union[MetaOapg.properties.requires_alpha_access, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelResponseModel':
        return super().__new__(
            cls,
            *args,
            can_use_style=can_use_style,
            token_cost_factor=token_cost_factor,
            languages=languages,
            can_do_text_to_speech=can_do_text_to_speech,
            description=description,
            max_characters_request_free_user=max_characters_request_free_user,
            max_characters_request_subscribed_user=max_characters_request_subscribed_user,
            model_id=model_id,
            can_be_finetuned=can_be_finetuned,
            serves_pro_voices=serves_pro_voices,
            can_do_voice_conversion=can_do_voice_conversion,
            can_use_speaker_boost=can_use_speaker_boost,
            name=name,
            requires_alpha_access=requires_alpha_access,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.language_response_model import LanguageResponseModel
