# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class SpeechHistoryItemResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "share_link_id",
            "settings",
            "history_item_id",
            "voice_id",
            "character_count_change_from",
            "voice_name",
            "model_id",
            "source",
            "feedback",
            "voice_category",
            "character_count_change_to",
            "date_unix",
            "content_type",
            "state",
            "text",
            "request_id",
        }
        
        class properties:
            history_item_id = schemas.StrSchema
            request_id = schemas.StrSchema
            voice_id = schemas.StrSchema
            model_id = schemas.StrSchema
            voice_name = schemas.StrSchema
            
            
            class voice_category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PREMADE(cls):
                    return cls("premade")
                
                @schemas.classproperty
                def CLONED(cls):
                    return cls("cloned")
                
                @schemas.classproperty
                def GENERATED(cls):
                    return cls("generated")
                
                @schemas.classproperty
                def PROFESSIONAL(cls):
                    return cls("professional")
            text = schemas.StrSchema
            date_unix = schemas.IntSchema
            character_count_change_from = schemas.IntSchema
            character_count_change_to = schemas.IntSchema
            content_type = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREATED(cls):
                    return cls("created")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("deleted")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("processing")
            settings = schemas.DictSchema
        
            @staticmethod
            def feedback() -> typing.Type['FeedbackResponseModel']:
                return FeedbackResponseModel
            share_link_id = schemas.StrSchema
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TTS(cls):
                    return cls("TTS")
                
                @schemas.classproperty
                def STS(cls):
                    return cls("STS")
            __annotations__ = {
                "history_item_id": history_item_id,
                "request_id": request_id,
                "voice_id": voice_id,
                "model_id": model_id,
                "voice_name": voice_name,
                "voice_category": voice_category,
                "text": text,
                "date_unix": date_unix,
                "character_count_change_from": character_count_change_from,
                "character_count_change_to": character_count_change_to,
                "content_type": content_type,
                "state": state,
                "settings": settings,
                "feedback": feedback,
                "share_link_id": share_link_id,
                "source": source,
            }
    
    share_link_id: MetaOapg.properties.share_link_id
    settings: MetaOapg.properties.settings
    history_item_id: MetaOapg.properties.history_item_id
    voice_id: MetaOapg.properties.voice_id
    character_count_change_from: MetaOapg.properties.character_count_change_from
    voice_name: MetaOapg.properties.voice_name
    model_id: MetaOapg.properties.model_id
    source: MetaOapg.properties.source
    feedback: 'FeedbackResponseModel'
    voice_category: MetaOapg.properties.voice_category
    character_count_change_to: MetaOapg.properties.character_count_change_to
    date_unix: MetaOapg.properties.date_unix
    content_type: MetaOapg.properties.content_type
    state: MetaOapg.properties.state
    text: MetaOapg.properties.text
    request_id: MetaOapg.properties.request_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["history_item_id"]) -> MetaOapg.properties.history_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_id"]) -> MetaOapg.properties.voice_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_name"]) -> MetaOapg.properties.voice_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_category"]) -> MetaOapg.properties.voice_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_unix"]) -> MetaOapg.properties.date_unix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["character_count_change_from"]) -> MetaOapg.properties.character_count_change_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["character_count_change_to"]) -> MetaOapg.properties.character_count_change_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback"]) -> 'FeedbackResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_link_id"]) -> MetaOapg.properties.share_link_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["history_item_id", "request_id", "voice_id", "model_id", "voice_name", "voice_category", "text", "date_unix", "character_count_change_from", "character_count_change_to", "content_type", "state", "settings", "feedback", "share_link_id", "source", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["history_item_id"]) -> MetaOapg.properties.history_item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_id"]) -> MetaOapg.properties.voice_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_name"]) -> MetaOapg.properties.voice_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_category"]) -> MetaOapg.properties.voice_category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_unix"]) -> MetaOapg.properties.date_unix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["character_count_change_from"]) -> MetaOapg.properties.character_count_change_from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["character_count_change_to"]) -> MetaOapg.properties.character_count_change_to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback"]) -> 'FeedbackResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_link_id"]) -> MetaOapg.properties.share_link_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["history_item_id", "request_id", "voice_id", "model_id", "voice_name", "voice_category", "text", "date_unix", "character_count_change_from", "character_count_change_to", "content_type", "state", "settings", "feedback", "share_link_id", "source", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        share_link_id: typing.Union[MetaOapg.properties.share_link_id, str, ],
        settings: typing.Union[MetaOapg.properties.settings, dict, frozendict.frozendict, ],
        history_item_id: typing.Union[MetaOapg.properties.history_item_id, str, ],
        voice_id: typing.Union[MetaOapg.properties.voice_id, str, ],
        character_count_change_from: typing.Union[MetaOapg.properties.character_count_change_from, decimal.Decimal, int, ],
        voice_name: typing.Union[MetaOapg.properties.voice_name, str, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, ],
        source: typing.Union[MetaOapg.properties.source, str, ],
        feedback: 'FeedbackResponseModel',
        voice_category: typing.Union[MetaOapg.properties.voice_category, str, ],
        character_count_change_to: typing.Union[MetaOapg.properties.character_count_change_to, decimal.Decimal, int, ],
        date_unix: typing.Union[MetaOapg.properties.date_unix, decimal.Decimal, int, ],
        content_type: typing.Union[MetaOapg.properties.content_type, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        text: typing.Union[MetaOapg.properties.text, str, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpeechHistoryItemResponseModel':
        return super().__new__(
            cls,
            *args,
            share_link_id=share_link_id,
            settings=settings,
            history_item_id=history_item_id,
            voice_id=voice_id,
            character_count_change_from=character_count_change_from,
            voice_name=voice_name,
            model_id=model_id,
            source=source,
            feedback=feedback,
            voice_category=voice_category,
            character_count_change_to=character_count_change_to,
            date_unix=date_unix,
            content_type=content_type,
            state=state,
            text=text,
            request_id=request_id,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.feedback_response_model import FeedbackResponseModel
