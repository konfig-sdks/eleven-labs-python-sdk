# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class RecordingResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "recording_id",
            "upload_date_unix",
            "size_bytes",
            "transcription",
            "mime_type",
        }
        
        class properties:
            recording_id = schemas.StrSchema
            mime_type = schemas.StrSchema
            size_bytes = schemas.IntSchema
            upload_date_unix = schemas.IntSchema
            transcription = schemas.StrSchema
            __annotations__ = {
                "recording_id": recording_id,
                "mime_type": mime_type,
                "size_bytes": size_bytes,
                "upload_date_unix": upload_date_unix,
                "transcription": transcription,
            }
    
    recording_id: MetaOapg.properties.recording_id
    upload_date_unix: MetaOapg.properties.upload_date_unix
    size_bytes: MetaOapg.properties.size_bytes
    transcription: MetaOapg.properties.transcription
    mime_type: MetaOapg.properties.mime_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recording_id"]) -> MetaOapg.properties.recording_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mime_type"]) -> MetaOapg.properties.mime_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_date_unix"]) -> MetaOapg.properties.upload_date_unix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcription"]) -> MetaOapg.properties.transcription: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["recording_id", "mime_type", "size_bytes", "upload_date_unix", "transcription", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recording_id"]) -> MetaOapg.properties.recording_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mime_type"]) -> MetaOapg.properties.mime_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_bytes"]) -> MetaOapg.properties.size_bytes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_date_unix"]) -> MetaOapg.properties.upload_date_unix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcription"]) -> MetaOapg.properties.transcription: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["recording_id", "mime_type", "size_bytes", "upload_date_unix", "transcription", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        recording_id: typing.Union[MetaOapg.properties.recording_id, str, ],
        upload_date_unix: typing.Union[MetaOapg.properties.upload_date_unix, decimal.Decimal, int, ],
        size_bytes: typing.Union[MetaOapg.properties.size_bytes, decimal.Decimal, int, ],
        transcription: typing.Union[MetaOapg.properties.transcription, str, ],
        mime_type: typing.Union[MetaOapg.properties.mime_type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecordingResponseModel':
        return super().__new__(
            cls,
            *args,
            recording_id=recording_id,
            upload_date_unix=upload_date_unix,
            size_bytes=size_bytes,
            transcription=transcription,
            mime_type=mime_type,
            _configuration=_configuration,
            **kwargs,
        )
