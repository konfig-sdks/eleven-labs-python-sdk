# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class BodyDubAVideoOrAnAudioFileV1DubbingPost(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "target_lang",
        }
        
        class properties:
            target_lang = schemas.StrSchema
            mode = schemas.StrSchema
            file = schemas.BinarySchema
            csv_file = schemas.BinarySchema
            foreground_audio_file = schemas.BinarySchema
            background_audio_file = schemas.BinarySchema
            name = schemas.StrSchema
            source_url = schemas.StrSchema
            source_lang = schemas.StrSchema
            num_speakers = schemas.IntSchema
            watermark = schemas.BoolSchema
            start_time = schemas.IntSchema
            end_time = schemas.IntSchema
            highest_resolution = schemas.BoolSchema
            dubbing_studio = schemas.BoolSchema
            __annotations__ = {
                "target_lang": target_lang,
                "mode": mode,
                "file": file,
                "csv_file": csv_file,
                "foreground_audio_file": foreground_audio_file,
                "background_audio_file": background_audio_file,
                "name": name,
                "source_url": source_url,
                "source_lang": source_lang,
                "num_speakers": num_speakers,
                "watermark": watermark,
                "start_time": start_time,
                "end_time": end_time,
                "highest_resolution": highest_resolution,
                "dubbing_studio": dubbing_studio,
            }
    
    target_lang: MetaOapg.properties.target_lang
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_lang"]) -> MetaOapg.properties.target_lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csv_file"]) -> MetaOapg.properties.csv_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreground_audio_file"]) -> MetaOapg.properties.foreground_audio_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["background_audio_file"]) -> MetaOapg.properties.background_audio_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_url"]) -> MetaOapg.properties.source_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_lang"]) -> MetaOapg.properties.source_lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_speakers"]) -> MetaOapg.properties.num_speakers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watermark"]) -> MetaOapg.properties.watermark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highest_resolution"]) -> MetaOapg.properties.highest_resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dubbing_studio"]) -> MetaOapg.properties.dubbing_studio: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["target_lang", "mode", "file", "csv_file", "foreground_audio_file", "background_audio_file", "name", "source_url", "source_lang", "num_speakers", "watermark", "start_time", "end_time", "highest_resolution", "dubbing_studio", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_lang"]) -> MetaOapg.properties.target_lang: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> typing.Union[MetaOapg.properties.file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csv_file"]) -> typing.Union[MetaOapg.properties.csv_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreground_audio_file"]) -> typing.Union[MetaOapg.properties.foreground_audio_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["background_audio_file"]) -> typing.Union[MetaOapg.properties.background_audio_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_url"]) -> typing.Union[MetaOapg.properties.source_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_lang"]) -> typing.Union[MetaOapg.properties.source_lang, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_speakers"]) -> typing.Union[MetaOapg.properties.num_speakers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watermark"]) -> typing.Union[MetaOapg.properties.watermark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highest_resolution"]) -> typing.Union[MetaOapg.properties.highest_resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dubbing_studio"]) -> typing.Union[MetaOapg.properties.dubbing_studio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["target_lang", "mode", "file", "csv_file", "foreground_audio_file", "background_audio_file", "name", "source_url", "source_lang", "num_speakers", "watermark", "start_time", "end_time", "highest_resolution", "dubbing_studio", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        target_lang: typing.Union[MetaOapg.properties.target_lang, str, ],
        mode: typing.Union[MetaOapg.properties.mode, str, schemas.Unset] = schemas.unset,
        file: typing.Union[MetaOapg.properties.file, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        csv_file: typing.Union[MetaOapg.properties.csv_file, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        foreground_audio_file: typing.Union[MetaOapg.properties.foreground_audio_file, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        background_audio_file: typing.Union[MetaOapg.properties.background_audio_file, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        source_url: typing.Union[MetaOapg.properties.source_url, str, schemas.Unset] = schemas.unset,
        source_lang: typing.Union[MetaOapg.properties.source_lang, str, schemas.Unset] = schemas.unset,
        num_speakers: typing.Union[MetaOapg.properties.num_speakers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        watermark: typing.Union[MetaOapg.properties.watermark, bool, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        highest_resolution: typing.Union[MetaOapg.properties.highest_resolution, bool, schemas.Unset] = schemas.unset,
        dubbing_studio: typing.Union[MetaOapg.properties.dubbing_studio, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BodyDubAVideoOrAnAudioFileV1DubbingPost':
        return super().__new__(
            cls,
            *args,
            target_lang=target_lang,
            mode=mode,
            file=file,
            csv_file=csv_file,
            foreground_audio_file=foreground_audio_file,
            background_audio_file=background_audio_file,
            name=name,
            source_url=source_url,
            source_lang=source_lang,
            num_speakers=num_speakers,
            watermark=watermark,
            start_time=start_time,
            end_time=end_time,
            highest_resolution=highest_resolution,
            dubbing_studio=dubbing_studio,
            _configuration=_configuration,
            **kwargs,
        )
