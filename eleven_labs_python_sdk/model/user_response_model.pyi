# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class UserResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "xi_api_key",
            "is_new_user",
            "is_onboarding_completed",
            "can_use_delayed_payment_methods",
            "subscription",
        }
        
        class properties:
        
            @staticmethod
            def subscription() -> typing.Type['SubscriptionResponseModel']:
                return SubscriptionResponseModel
            is_new_user = schemas.BoolSchema
            xi_api_key = schemas.StrSchema
            can_use_delayed_payment_methods = schemas.BoolSchema
            is_onboarding_completed = schemas.BoolSchema
            first_name = schemas.StrSchema
            __annotations__ = {
                "subscription": subscription,
                "is_new_user": is_new_user,
                "xi_api_key": xi_api_key,
                "can_use_delayed_payment_methods": can_use_delayed_payment_methods,
                "is_onboarding_completed": is_onboarding_completed,
                "first_name": first_name,
            }
    
    xi_api_key: MetaOapg.properties.xi_api_key
    is_new_user: MetaOapg.properties.is_new_user
    is_onboarding_completed: MetaOapg.properties.is_onboarding_completed
    can_use_delayed_payment_methods: MetaOapg.properties.can_use_delayed_payment_methods
    subscription: 'SubscriptionResponseModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> 'SubscriptionResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_new_user"]) -> MetaOapg.properties.is_new_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xi_api_key"]) -> MetaOapg.properties.xi_api_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_use_delayed_payment_methods"]) -> MetaOapg.properties.can_use_delayed_payment_methods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_onboarding_completed"]) -> MetaOapg.properties.is_onboarding_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subscription", "is_new_user", "xi_api_key", "can_use_delayed_payment_methods", "is_onboarding_completed", "first_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> 'SubscriptionResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_new_user"]) -> MetaOapg.properties.is_new_user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xi_api_key"]) -> MetaOapg.properties.xi_api_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_use_delayed_payment_methods"]) -> MetaOapg.properties.can_use_delayed_payment_methods: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_onboarding_completed"]) -> MetaOapg.properties.is_onboarding_completed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subscription", "is_new_user", "xi_api_key", "can_use_delayed_payment_methods", "is_onboarding_completed", "first_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        xi_api_key: typing.Union[MetaOapg.properties.xi_api_key, str, ],
        is_new_user: typing.Union[MetaOapg.properties.is_new_user, bool, ],
        is_onboarding_completed: typing.Union[MetaOapg.properties.is_onboarding_completed, bool, ],
        can_use_delayed_payment_methods: typing.Union[MetaOapg.properties.can_use_delayed_payment_methods, bool, ],
        subscription: 'SubscriptionResponseModel',
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserResponseModel':
        return super().__new__(
            cls,
            *args,
            xi_api_key=xi_api_key,
            is_new_user=is_new_user,
            is_onboarding_completed=is_onboarding_completed,
            can_use_delayed_payment_methods=can_use_delayed_payment_methods,
            subscription=subscription,
            first_name=first_name,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.subscription_response_model import SubscriptionResponseModel
