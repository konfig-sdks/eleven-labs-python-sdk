# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class ChapterStatisticsResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "paragraphs_unconverted",
            "characters_unconverted",
            "characters_converted",
            "paragraphs_converted",
        }
        
        class properties:
            characters_unconverted = schemas.IntSchema
            characters_converted = schemas.IntSchema
            paragraphs_converted = schemas.IntSchema
            paragraphs_unconverted = schemas.IntSchema
            __annotations__ = {
                "characters_unconverted": characters_unconverted,
                "characters_converted": characters_converted,
                "paragraphs_converted": paragraphs_converted,
                "paragraphs_unconverted": paragraphs_unconverted,
            }
    
    paragraphs_unconverted: MetaOapg.properties.paragraphs_unconverted
    characters_unconverted: MetaOapg.properties.characters_unconverted
    characters_converted: MetaOapg.properties.characters_converted
    paragraphs_converted: MetaOapg.properties.paragraphs_converted
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characters_unconverted"]) -> MetaOapg.properties.characters_unconverted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characters_converted"]) -> MetaOapg.properties.characters_converted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paragraphs_converted"]) -> MetaOapg.properties.paragraphs_converted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paragraphs_unconverted"]) -> MetaOapg.properties.paragraphs_unconverted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["characters_unconverted", "characters_converted", "paragraphs_converted", "paragraphs_unconverted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characters_unconverted"]) -> MetaOapg.properties.characters_unconverted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characters_converted"]) -> MetaOapg.properties.characters_converted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paragraphs_converted"]) -> MetaOapg.properties.paragraphs_converted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paragraphs_unconverted"]) -> MetaOapg.properties.paragraphs_unconverted: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["characters_unconverted", "characters_converted", "paragraphs_converted", "paragraphs_unconverted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paragraphs_unconverted: typing.Union[MetaOapg.properties.paragraphs_unconverted, decimal.Decimal, int, ],
        characters_unconverted: typing.Union[MetaOapg.properties.characters_unconverted, decimal.Decimal, int, ],
        characters_converted: typing.Union[MetaOapg.properties.characters_converted, decimal.Decimal, int, ],
        paragraphs_converted: typing.Union[MetaOapg.properties.paragraphs_converted, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChapterStatisticsResponseModel':
        return super().__new__(
            cls,
            *args,
            paragraphs_unconverted=paragraphs_unconverted,
            characters_unconverted=characters_unconverted,
            characters_converted=characters_converted,
            paragraphs_converted=paragraphs_converted,
            _configuration=_configuration,
            **kwargs,
        )
