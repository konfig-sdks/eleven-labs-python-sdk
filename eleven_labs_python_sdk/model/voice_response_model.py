# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class VoiceResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "settings",
            "voice_id",
            "preview_url",
            "name",
            "description",
            "fine_tuning",
            "category",
            "sharing",
            "high_quality_base_model_ids",
            "available_for_tiers",
            "samples",
            "labels",
        }
        
        class properties:
            description = schemas.StrSchema
            voice_id = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class samples(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SampleResponseModel']:
                        return SampleResponseModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SampleResponseModel'], typing.List['SampleResponseModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'samples':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SampleResponseModel':
                    return super().__getitem__(i)
            category = schemas.StrSchema
        
            @staticmethod
            def fine_tuning() -> typing.Type['FineTuningResponseModel']:
                return FineTuningResponseModel
        
            @staticmethod
            def labels() -> typing.Type['VoiceResponseModelLabels']:
                return VoiceResponseModelLabels
            preview_url = schemas.StrSchema
        
            @staticmethod
            def available_for_tiers() -> typing.Type['VoiceResponseModelAvailableForTiers']:
                return VoiceResponseModelAvailableForTiers
        
            @staticmethod
            def settings() -> typing.Type['VoiceSettingsResponseModel']:
                return VoiceSettingsResponseModel
        
            @staticmethod
            def sharing() -> typing.Type['VoiceSharingResponseModel']:
                return VoiceSharingResponseModel
        
            @staticmethod
            def high_quality_base_model_ids() -> typing.Type['VoiceResponseModelHighQualityBaseModelIds']:
                return VoiceResponseModelHighQualityBaseModelIds
            
            
            class safety_control(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NONE": "NONE",
                        "BAN": "BAN",
                        "CAPTCHA": "CAPTCHA",
                        "CAPTCHA_AND_MODERATION": "CAPTCHA_AND_MODERATION",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def BAN(cls):
                    return cls("BAN")
                
                @schemas.classproperty
                def CAPTCHA(cls):
                    return cls("CAPTCHA")
                
                @schemas.classproperty
                def CAPTCHA_AND_MODERATION(cls):
                    return cls("CAPTCHA_AND_MODERATION")
        
            @staticmethod
            def voice_verification() -> typing.Type['VoiceVerificationResponseModel']:
                return VoiceVerificationResponseModel
            __annotations__ = {
                "description": description,
                "voice_id": voice_id,
                "name": name,
                "samples": samples,
                "category": category,
                "fine_tuning": fine_tuning,
                "labels": labels,
                "preview_url": preview_url,
                "available_for_tiers": available_for_tiers,
                "settings": settings,
                "sharing": sharing,
                "high_quality_base_model_ids": high_quality_base_model_ids,
                "safety_control": safety_control,
                "voice_verification": voice_verification,
            }
    
    settings: 'VoiceSettingsResponseModel'
    voice_id: MetaOapg.properties.voice_id
    preview_url: MetaOapg.properties.preview_url
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    fine_tuning: 'FineTuningResponseModel'
    category: MetaOapg.properties.category
    sharing: 'VoiceSharingResponseModel'
    high_quality_base_model_ids: 'VoiceResponseModelHighQualityBaseModelIds'
    available_for_tiers: 'VoiceResponseModelAvailableForTiers'
    samples: MetaOapg.properties.samples
    labels: 'VoiceResponseModelLabels'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_id"]) -> MetaOapg.properties.voice_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samples"]) -> MetaOapg.properties.samples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fine_tuning"]) -> 'FineTuningResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> 'VoiceResponseModelLabels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_url"]) -> MetaOapg.properties.preview_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_for_tiers"]) -> 'VoiceResponseModelAvailableForTiers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'VoiceSettingsResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> 'VoiceSharingResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["high_quality_base_model_ids"]) -> 'VoiceResponseModelHighQualityBaseModelIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safety_control"]) -> MetaOapg.properties.safety_control: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_verification"]) -> 'VoiceVerificationResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "voice_id", "name", "samples", "category", "fine_tuning", "labels", "preview_url", "available_for_tiers", "settings", "sharing", "high_quality_base_model_ids", "safety_control", "voice_verification", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_id"]) -> MetaOapg.properties.voice_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samples"]) -> MetaOapg.properties.samples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fine_tuning"]) -> 'FineTuningResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> 'VoiceResponseModelLabels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_url"]) -> MetaOapg.properties.preview_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_for_tiers"]) -> 'VoiceResponseModelAvailableForTiers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'VoiceSettingsResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> 'VoiceSharingResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["high_quality_base_model_ids"]) -> 'VoiceResponseModelHighQualityBaseModelIds': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safety_control"]) -> typing.Union[MetaOapg.properties.safety_control, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_verification"]) -> typing.Union['VoiceVerificationResponseModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "voice_id", "name", "samples", "category", "fine_tuning", "labels", "preview_url", "available_for_tiers", "settings", "sharing", "high_quality_base_model_ids", "safety_control", "voice_verification", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        settings: 'VoiceSettingsResponseModel',
        voice_id: typing.Union[MetaOapg.properties.voice_id, str, ],
        preview_url: typing.Union[MetaOapg.properties.preview_url, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        fine_tuning: 'FineTuningResponseModel',
        category: typing.Union[MetaOapg.properties.category, str, ],
        sharing: 'VoiceSharingResponseModel',
        high_quality_base_model_ids: 'VoiceResponseModelHighQualityBaseModelIds',
        available_for_tiers: 'VoiceResponseModelAvailableForTiers',
        samples: typing.Union[MetaOapg.properties.samples, list, tuple, ],
        labels: 'VoiceResponseModelLabels',
        safety_control: typing.Union[MetaOapg.properties.safety_control, str, schemas.Unset] = schemas.unset,
        voice_verification: typing.Union['VoiceVerificationResponseModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoiceResponseModel':
        return super().__new__(
            cls,
            *args,
            settings=settings,
            voice_id=voice_id,
            preview_url=preview_url,
            name=name,
            description=description,
            fine_tuning=fine_tuning,
            category=category,
            sharing=sharing,
            high_quality_base_model_ids=high_quality_base_model_ids,
            available_for_tiers=available_for_tiers,
            samples=samples,
            labels=labels,
            safety_control=safety_control,
            voice_verification=voice_verification,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.fine_tuning_response_model import FineTuningResponseModel
from eleven_labs_python_sdk.model.sample_response_model import SampleResponseModel
from eleven_labs_python_sdk.model.voice_response_model_available_for_tiers import VoiceResponseModelAvailableForTiers
from eleven_labs_python_sdk.model.voice_response_model_high_quality_base_model_ids import VoiceResponseModelHighQualityBaseModelIds
from eleven_labs_python_sdk.model.voice_response_model_labels import VoiceResponseModelLabels
from eleven_labs_python_sdk.model.voice_settings_response_model import VoiceSettingsResponseModel
from eleven_labs_python_sdk.model.voice_sharing_response_model import VoiceSharingResponseModel
from eleven_labs_python_sdk.model.voice_verification_response_model import VoiceVerificationResponseModel
