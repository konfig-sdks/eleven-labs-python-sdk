# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class VoiceVerificationResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "verification_failures",
            "verification_attempts_count",
            "requires_verification",
            "is_verified",
        }
        
        class properties:
            requires_verification = schemas.BoolSchema
            is_verified = schemas.BoolSchema
        
            @staticmethod
            def verification_failures() -> typing.Type['VoiceVerificationResponseModelVerificationFailures']:
                return VoiceVerificationResponseModelVerificationFailures
            verification_attempts_count = schemas.IntSchema
            language = schemas.StrSchema
            
            
            class verification_attempts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VerificationAttemptResponseModel']:
                        return VerificationAttemptResponseModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VerificationAttemptResponseModel'], typing.List['VerificationAttemptResponseModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'verification_attempts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VerificationAttemptResponseModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "requires_verification": requires_verification,
                "is_verified": is_verified,
                "verification_failures": verification_failures,
                "verification_attempts_count": verification_attempts_count,
                "language": language,
                "verification_attempts": verification_attempts,
            }
    
    verification_failures: 'VoiceVerificationResponseModelVerificationFailures'
    verification_attempts_count: MetaOapg.properties.verification_attempts_count
    requires_verification: MetaOapg.properties.requires_verification
    is_verified: MetaOapg.properties.is_verified
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requires_verification"]) -> MetaOapg.properties.requires_verification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_verified"]) -> MetaOapg.properties.is_verified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_failures"]) -> 'VoiceVerificationResponseModelVerificationFailures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_attempts_count"]) -> MetaOapg.properties.verification_attempts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_attempts"]) -> MetaOapg.properties.verification_attempts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requires_verification", "is_verified", "verification_failures", "verification_attempts_count", "language", "verification_attempts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requires_verification"]) -> MetaOapg.properties.requires_verification: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_verified"]) -> MetaOapg.properties.is_verified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_failures"]) -> 'VoiceVerificationResponseModelVerificationFailures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_attempts_count"]) -> MetaOapg.properties.verification_attempts_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_attempts"]) -> typing.Union[MetaOapg.properties.verification_attempts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requires_verification", "is_verified", "verification_failures", "verification_attempts_count", "language", "verification_attempts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        verification_failures: 'VoiceVerificationResponseModelVerificationFailures',
        verification_attempts_count: typing.Union[MetaOapg.properties.verification_attempts_count, decimal.Decimal, int, ],
        requires_verification: typing.Union[MetaOapg.properties.requires_verification, bool, ],
        is_verified: typing.Union[MetaOapg.properties.is_verified, bool, ],
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        verification_attempts: typing.Union[MetaOapg.properties.verification_attempts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoiceVerificationResponseModel':
        return super().__new__(
            cls,
            *args,
            verification_failures=verification_failures,
            verification_attempts_count=verification_attempts_count,
            requires_verification=requires_verification,
            is_verified=is_verified,
            language=language,
            verification_attempts=verification_attempts,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.verification_attempt_response_model import VerificationAttemptResponseModel
from eleven_labs_python_sdk.model.voice_verification_response_model_verification_failures import VoiceVerificationResponseModelVerificationFailures
