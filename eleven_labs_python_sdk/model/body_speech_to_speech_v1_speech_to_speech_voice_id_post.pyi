# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "audio",
        }
        
        class properties:
            audio = schemas.BinarySchema
            model_id = schemas.StrSchema
            voice_settings = schemas.StrSchema
            __annotations__ = {
                "audio": audio,
                "model_id": model_id,
                "voice_settings": voice_settings,
            }
    
    audio: MetaOapg.properties.audio
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> MetaOapg.properties.audio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_settings"]) -> MetaOapg.properties.voice_settings: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["audio", "model_id", "voice_settings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> MetaOapg.properties.audio: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> typing.Union[MetaOapg.properties.model_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_settings"]) -> typing.Union[MetaOapg.properties.voice_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["audio", "model_id", "voice_settings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        audio: typing.Union[MetaOapg.properties.audio, bytes, io.FileIO, io.BufferedReader, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, schemas.Unset] = schemas.unset,
        voice_settings: typing.Union[MetaOapg.properties.voice_settings, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost':
        return super().__new__(
            cls,
            *args,
            audio=audio,
            model_id=model_id,
            voice_settings=voice_settings,
            _configuration=_configuration,
            **kwargs,
        )
