# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class PronunciationDictionaryVersionLocatorDBModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "pronunciation_dictionary_id",
            "version_id",
        }
        
        class properties:
            pronunciation_dictionary_id = schemas.StrSchema
            version_id = schemas.StrSchema
            __annotations__ = {
                "pronunciation_dictionary_id": pronunciation_dictionary_id,
                "version_id": version_id,
            }
    
    pronunciation_dictionary_id: MetaOapg.properties.pronunciation_dictionary_id
    version_id: MetaOapg.properties.version_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pronunciation_dictionary_id"]) -> MetaOapg.properties.pronunciation_dictionary_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_id"]) -> MetaOapg.properties.version_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pronunciation_dictionary_id", "version_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pronunciation_dictionary_id"]) -> MetaOapg.properties.pronunciation_dictionary_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_id"]) -> MetaOapg.properties.version_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pronunciation_dictionary_id", "version_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pronunciation_dictionary_id: typing.Union[MetaOapg.properties.pronunciation_dictionary_id, str, ],
        version_id: typing.Union[MetaOapg.properties.version_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PronunciationDictionaryVersionLocatorDBModel':
        return super().__new__(
            cls,
            *args,
            pronunciation_dictionary_id=pronunciation_dictionary_id,
            version_id=version_id,
            _configuration=_configuration,
            **kwargs,
        )
