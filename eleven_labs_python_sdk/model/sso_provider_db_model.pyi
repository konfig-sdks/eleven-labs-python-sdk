# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class SsoProviderDBModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "provider_type",
            "domains",
            "provider_id",
        }
        
        class properties:
            
            
            class provider_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SAML(cls):
                    return cls("saml")
                
                @schemas.classproperty
                def OIDC(cls):
                    return cls("oidc")
            provider_id = schemas.StrSchema
        
            @staticmethod
            def domains() -> typing.Type['SsoProviderDBModelDomains']:
                return SsoProviderDBModelDomains
            __annotations__ = {
                "provider_type": provider_type,
                "provider_id": provider_id,
                "domains": domains,
            }
    
    provider_type: MetaOapg.properties.provider_type
    domains: 'SsoProviderDBModelDomains'
    provider_id: MetaOapg.properties.provider_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_type"]) -> MetaOapg.properties.provider_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_id"]) -> MetaOapg.properties.provider_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domains"]) -> 'SsoProviderDBModelDomains': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["provider_type", "provider_id", "domains", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_type"]) -> MetaOapg.properties.provider_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_id"]) -> MetaOapg.properties.provider_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domains"]) -> 'SsoProviderDBModelDomains': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["provider_type", "provider_id", "domains", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        provider_type: typing.Union[MetaOapg.properties.provider_type, str, ],
        domains: 'SsoProviderDBModelDomains',
        provider_id: typing.Union[MetaOapg.properties.provider_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SsoProviderDBModel':
        return super().__new__(
            cls,
            *args,
            provider_type=provider_type,
            domains=domains,
            provider_id=provider_id,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.sso_provider_db_model_domains import SsoProviderDBModelDomains
