# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class ChapterResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "can_be_downloaded",
            "conversion_progress",
            "name",
            "chapter_id",
            "state",
            "last_conversion_date_unix",
            "statistics",
        }
        
        class properties:
            chapter_id = schemas.StrSchema
            name = schemas.StrSchema
            last_conversion_date_unix = schemas.IntSchema
            conversion_progress = schemas.NumberSchema
            can_be_downloaded = schemas.BoolSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "default": "DEFAULT",
                        "converting": "CONVERTING",
                    }
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("default")
                
                @schemas.classproperty
                def CONVERTING(cls):
                    return cls("converting")
        
            @staticmethod
            def statistics() -> typing.Type['ChapterStatisticsResponseModel']:
                return ChapterStatisticsResponseModel
            __annotations__ = {
                "chapter_id": chapter_id,
                "name": name,
                "last_conversion_date_unix": last_conversion_date_unix,
                "conversion_progress": conversion_progress,
                "can_be_downloaded": can_be_downloaded,
                "state": state,
                "statistics": statistics,
            }
    
    can_be_downloaded: MetaOapg.properties.can_be_downloaded
    conversion_progress: MetaOapg.properties.conversion_progress
    name: MetaOapg.properties.name
    chapter_id: MetaOapg.properties.chapter_id
    state: MetaOapg.properties.state
    last_conversion_date_unix: MetaOapg.properties.last_conversion_date_unix
    statistics: 'ChapterStatisticsResponseModel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chapter_id"]) -> MetaOapg.properties.chapter_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_conversion_date_unix"]) -> MetaOapg.properties.last_conversion_date_unix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conversion_progress"]) -> MetaOapg.properties.conversion_progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_downloaded"]) -> MetaOapg.properties.can_be_downloaded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistics"]) -> 'ChapterStatisticsResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chapter_id", "name", "last_conversion_date_unix", "conversion_progress", "can_be_downloaded", "state", "statistics", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chapter_id"]) -> MetaOapg.properties.chapter_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_conversion_date_unix"]) -> MetaOapg.properties.last_conversion_date_unix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conversion_progress"]) -> MetaOapg.properties.conversion_progress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_downloaded"]) -> MetaOapg.properties.can_be_downloaded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistics"]) -> 'ChapterStatisticsResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chapter_id", "name", "last_conversion_date_unix", "conversion_progress", "can_be_downloaded", "state", "statistics", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        can_be_downloaded: typing.Union[MetaOapg.properties.can_be_downloaded, bool, ],
        conversion_progress: typing.Union[MetaOapg.properties.conversion_progress, decimal.Decimal, int, float, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        chapter_id: typing.Union[MetaOapg.properties.chapter_id, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        last_conversion_date_unix: typing.Union[MetaOapg.properties.last_conversion_date_unix, decimal.Decimal, int, ],
        statistics: 'ChapterStatisticsResponseModel',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChapterResponseModel':
        return super().__new__(
            cls,
            *args,
            can_be_downloaded=can_be_downloaded,
            conversion_progress=conversion_progress,
            name=name,
            chapter_id=chapter_id,
            state=state,
            last_conversion_date_unix=last_conversion_date_unix,
            statistics=statistics,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.chapter_statistics_response_model import ChapterStatisticsResponseModel
