# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class FineTuningResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "is_allowed_to_fine_tune",
            "verification_failures",
            "verification_attempts_count",
            "finetuning_state",
            "manual_verification_requested",
        }
        
        class properties:
            is_allowed_to_fine_tune = schemas.BoolSchema
            
            
            class finetuning_state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_STARTED(cls):
                    return cls("not_started")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("queued")
                
                @schemas.classproperty
                def FINE_TUNING(cls):
                    return cls("fine_tuning")
                
                @schemas.classproperty
                def FINE_TUNED(cls):
                    return cls("fine_tuned")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def DELAYED(cls):
                    return cls("delayed")
        
            @staticmethod
            def verification_failures() -> typing.Type['FineTuningResponseModelVerificationFailures']:
                return FineTuningResponseModelVerificationFailures
            verification_attempts_count = schemas.IntSchema
            manual_verification_requested = schemas.BoolSchema
            language = schemas.StrSchema
        
            @staticmethod
            def finetuning_progress() -> typing.Type['FineTuningResponseModelFinetuningProgress']:
                return FineTuningResponseModelFinetuningProgress
            message = schemas.StrSchema
            dataset_duration_seconds = schemas.NumberSchema
            
            
            class verification_attempts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VerificationAttemptResponseModel']:
                        return VerificationAttemptResponseModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VerificationAttemptResponseModel'], typing.List['VerificationAttemptResponseModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'verification_attempts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VerificationAttemptResponseModel':
                    return super().__getitem__(i)
        
            @staticmethod
            def slice_ids() -> typing.Type['FineTuningResponseModelSliceIds']:
                return FineTuningResponseModelSliceIds
        
            @staticmethod
            def manual_verification() -> typing.Type['ManualVerificationResponseModel']:
                return ManualVerificationResponseModel
            __annotations__ = {
                "is_allowed_to_fine_tune": is_allowed_to_fine_tune,
                "finetuning_state": finetuning_state,
                "verification_failures": verification_failures,
                "verification_attempts_count": verification_attempts_count,
                "manual_verification_requested": manual_verification_requested,
                "language": language,
                "finetuning_progress": finetuning_progress,
                "message": message,
                "dataset_duration_seconds": dataset_duration_seconds,
                "verification_attempts": verification_attempts,
                "slice_ids": slice_ids,
                "manual_verification": manual_verification,
            }
    
    is_allowed_to_fine_tune: MetaOapg.properties.is_allowed_to_fine_tune
    verification_failures: 'FineTuningResponseModelVerificationFailures'
    verification_attempts_count: MetaOapg.properties.verification_attempts_count
    finetuning_state: MetaOapg.properties.finetuning_state
    manual_verification_requested: MetaOapg.properties.manual_verification_requested
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_allowed_to_fine_tune"]) -> MetaOapg.properties.is_allowed_to_fine_tune: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finetuning_state"]) -> MetaOapg.properties.finetuning_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_failures"]) -> 'FineTuningResponseModelVerificationFailures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_attempts_count"]) -> MetaOapg.properties.verification_attempts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manual_verification_requested"]) -> MetaOapg.properties.manual_verification_requested: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finetuning_progress"]) -> 'FineTuningResponseModelFinetuningProgress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataset_duration_seconds"]) -> MetaOapg.properties.dataset_duration_seconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_attempts"]) -> MetaOapg.properties.verification_attempts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slice_ids"]) -> 'FineTuningResponseModelSliceIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manual_verification"]) -> 'ManualVerificationResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_allowed_to_fine_tune", "finetuning_state", "verification_failures", "verification_attempts_count", "manual_verification_requested", "language", "finetuning_progress", "message", "dataset_duration_seconds", "verification_attempts", "slice_ids", "manual_verification", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_allowed_to_fine_tune"]) -> MetaOapg.properties.is_allowed_to_fine_tune: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finetuning_state"]) -> MetaOapg.properties.finetuning_state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_failures"]) -> 'FineTuningResponseModelVerificationFailures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_attempts_count"]) -> MetaOapg.properties.verification_attempts_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manual_verification_requested"]) -> MetaOapg.properties.manual_verification_requested: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finetuning_progress"]) -> typing.Union['FineTuningResponseModelFinetuningProgress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataset_duration_seconds"]) -> typing.Union[MetaOapg.properties.dataset_duration_seconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_attempts"]) -> typing.Union[MetaOapg.properties.verification_attempts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slice_ids"]) -> typing.Union['FineTuningResponseModelSliceIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manual_verification"]) -> typing.Union['ManualVerificationResponseModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_allowed_to_fine_tune", "finetuning_state", "verification_failures", "verification_attempts_count", "manual_verification_requested", "language", "finetuning_progress", "message", "dataset_duration_seconds", "verification_attempts", "slice_ids", "manual_verification", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_allowed_to_fine_tune: typing.Union[MetaOapg.properties.is_allowed_to_fine_tune, bool, ],
        verification_failures: 'FineTuningResponseModelVerificationFailures',
        verification_attempts_count: typing.Union[MetaOapg.properties.verification_attempts_count, decimal.Decimal, int, ],
        finetuning_state: typing.Union[MetaOapg.properties.finetuning_state, str, ],
        manual_verification_requested: typing.Union[MetaOapg.properties.manual_verification_requested, bool, ],
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        finetuning_progress: typing.Union['FineTuningResponseModelFinetuningProgress', schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        dataset_duration_seconds: typing.Union[MetaOapg.properties.dataset_duration_seconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        verification_attempts: typing.Union[MetaOapg.properties.verification_attempts, list, tuple, schemas.Unset] = schemas.unset,
        slice_ids: typing.Union['FineTuningResponseModelSliceIds', schemas.Unset] = schemas.unset,
        manual_verification: typing.Union['ManualVerificationResponseModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FineTuningResponseModel':
        return super().__new__(
            cls,
            *args,
            is_allowed_to_fine_tune=is_allowed_to_fine_tune,
            verification_failures=verification_failures,
            verification_attempts_count=verification_attempts_count,
            finetuning_state=finetuning_state,
            manual_verification_requested=manual_verification_requested,
            language=language,
            finetuning_progress=finetuning_progress,
            message=message,
            dataset_duration_seconds=dataset_duration_seconds,
            verification_attempts=verification_attempts,
            slice_ids=slice_ids,
            manual_verification=manual_verification,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.fine_tuning_response_model_finetuning_progress import FineTuningResponseModelFinetuningProgress
from eleven_labs_python_sdk.model.fine_tuning_response_model_slice_ids import FineTuningResponseModelSliceIds
from eleven_labs_python_sdk.model.fine_tuning_response_model_verification_failures import FineTuningResponseModelVerificationFailures
from eleven_labs_python_sdk.model.manual_verification_response_model import ManualVerificationResponseModel
from eleven_labs_python_sdk.model.verification_attempt_response_model import VerificationAttemptResponseModel
