# coding: utf-8

"""
    ElevenLabs API Documentation

    This is the documentation for the ElevenLabs API. You can use this API to use our service programmatically, this is done by using your xi-api-key. <br/> You can view your xi-api-key using the 'Profile' tab on https://elevenlabs.io. Our API is experimental so all endpoints are subject to change.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from eleven_labs_python_sdk import schemas  # noqa: F401


class ExtendedSubscriptionResponseModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "next_invoice",
            "can_use_instant_voice_cloning",
            "character_limit",
            "allowed_to_extend_character_limit",
            "next_character_count_reset_unix",
            "can_extend_character_limit",
            "voice_limit",
            "tier",
            "can_extend_voice_limit",
            "can_use_professional_voice_cloning",
            "voice_add_edit_counter",
            "has_open_invoices",
            "max_voice_add_edits",
            "currency",
            "professional_voice_limit",
            "character_count",
            "status",
        }
        
        class properties:
            tier = schemas.StrSchema
            character_count = schemas.IntSchema
            character_limit = schemas.IntSchema
            can_extend_character_limit = schemas.BoolSchema
            allowed_to_extend_character_limit = schemas.BoolSchema
            next_character_count_reset_unix = schemas.IntSchema
            voice_limit = schemas.IntSchema
            max_voice_add_edits = schemas.IntSchema
            voice_add_edit_counter = schemas.IntSchema
            professional_voice_limit = schemas.IntSchema
            can_extend_voice_limit = schemas.BoolSchema
            can_use_instant_voice_cloning = schemas.BoolSchema
            can_use_professional_voice_cloning = schemas.BoolSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "usd": "USD",
                        "eur": "EUR",
                    }
                
                @schemas.classproperty
                def USD(cls):
                    return cls("usd")
                
                @schemas.classproperty
                def EUR(cls):
                    return cls("eur")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "trialing": "TRIALING",
                        "active": "ACTIVE",
                        "incomplete": "INCOMPLETE",
                        "incomplete_expired": "INCOMPLETE_EXPIRED",
                        "past_due": "PAST_DUE",
                        "canceled": "CANCELED",
                        "unpaid": "UNPAID",
                        "free": "FREE",
                    }
                
                @schemas.classproperty
                def TRIALING(cls):
                    return cls("trialing")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def INCOMPLETE(cls):
                    return cls("incomplete")
                
                @schemas.classproperty
                def INCOMPLETE_EXPIRED(cls):
                    return cls("incomplete_expired")
                
                @schemas.classproperty
                def PAST_DUE(cls):
                    return cls("past_due")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def UNPAID(cls):
                    return cls("unpaid")
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("free")
        
            @staticmethod
            def next_invoice() -> typing.Type['InvoiceResponseModel']:
                return InvoiceResponseModel
            has_open_invoices = schemas.BoolSchema
            __annotations__ = {
                "tier": tier,
                "character_count": character_count,
                "character_limit": character_limit,
                "can_extend_character_limit": can_extend_character_limit,
                "allowed_to_extend_character_limit": allowed_to_extend_character_limit,
                "next_character_count_reset_unix": next_character_count_reset_unix,
                "voice_limit": voice_limit,
                "max_voice_add_edits": max_voice_add_edits,
                "voice_add_edit_counter": voice_add_edit_counter,
                "professional_voice_limit": professional_voice_limit,
                "can_extend_voice_limit": can_extend_voice_limit,
                "can_use_instant_voice_cloning": can_use_instant_voice_cloning,
                "can_use_professional_voice_cloning": can_use_professional_voice_cloning,
                "currency": currency,
                "status": status,
                "next_invoice": next_invoice,
                "has_open_invoices": has_open_invoices,
            }
    
    next_invoice: 'InvoiceResponseModel'
    can_use_instant_voice_cloning: MetaOapg.properties.can_use_instant_voice_cloning
    character_limit: MetaOapg.properties.character_limit
    allowed_to_extend_character_limit: MetaOapg.properties.allowed_to_extend_character_limit
    next_character_count_reset_unix: MetaOapg.properties.next_character_count_reset_unix
    can_extend_character_limit: MetaOapg.properties.can_extend_character_limit
    voice_limit: MetaOapg.properties.voice_limit
    tier: MetaOapg.properties.tier
    can_extend_voice_limit: MetaOapg.properties.can_extend_voice_limit
    can_use_professional_voice_cloning: MetaOapg.properties.can_use_professional_voice_cloning
    voice_add_edit_counter: MetaOapg.properties.voice_add_edit_counter
    has_open_invoices: MetaOapg.properties.has_open_invoices
    max_voice_add_edits: MetaOapg.properties.max_voice_add_edits
    currency: MetaOapg.properties.currency
    professional_voice_limit: MetaOapg.properties.professional_voice_limit
    character_count: MetaOapg.properties.character_count
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["character_count"]) -> MetaOapg.properties.character_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["character_limit"]) -> MetaOapg.properties.character_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_extend_character_limit"]) -> MetaOapg.properties.can_extend_character_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_to_extend_character_limit"]) -> MetaOapg.properties.allowed_to_extend_character_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_character_count_reset_unix"]) -> MetaOapg.properties.next_character_count_reset_unix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_limit"]) -> MetaOapg.properties.voice_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_voice_add_edits"]) -> MetaOapg.properties.max_voice_add_edits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice_add_edit_counter"]) -> MetaOapg.properties.voice_add_edit_counter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["professional_voice_limit"]) -> MetaOapg.properties.professional_voice_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_extend_voice_limit"]) -> MetaOapg.properties.can_extend_voice_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_use_instant_voice_cloning"]) -> MetaOapg.properties.can_use_instant_voice_cloning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_use_professional_voice_cloning"]) -> MetaOapg.properties.can_use_professional_voice_cloning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_invoice"]) -> 'InvoiceResponseModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_open_invoices"]) -> MetaOapg.properties.has_open_invoices: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tier", "character_count", "character_limit", "can_extend_character_limit", "allowed_to_extend_character_limit", "next_character_count_reset_unix", "voice_limit", "max_voice_add_edits", "voice_add_edit_counter", "professional_voice_limit", "can_extend_voice_limit", "can_use_instant_voice_cloning", "can_use_professional_voice_cloning", "currency", "status", "next_invoice", "has_open_invoices", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tier"]) -> MetaOapg.properties.tier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["character_count"]) -> MetaOapg.properties.character_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["character_limit"]) -> MetaOapg.properties.character_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_extend_character_limit"]) -> MetaOapg.properties.can_extend_character_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_to_extend_character_limit"]) -> MetaOapg.properties.allowed_to_extend_character_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_character_count_reset_unix"]) -> MetaOapg.properties.next_character_count_reset_unix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_limit"]) -> MetaOapg.properties.voice_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_voice_add_edits"]) -> MetaOapg.properties.max_voice_add_edits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice_add_edit_counter"]) -> MetaOapg.properties.voice_add_edit_counter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["professional_voice_limit"]) -> MetaOapg.properties.professional_voice_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_extend_voice_limit"]) -> MetaOapg.properties.can_extend_voice_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_use_instant_voice_cloning"]) -> MetaOapg.properties.can_use_instant_voice_cloning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_use_professional_voice_cloning"]) -> MetaOapg.properties.can_use_professional_voice_cloning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_invoice"]) -> 'InvoiceResponseModel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_open_invoices"]) -> MetaOapg.properties.has_open_invoices: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tier", "character_count", "character_limit", "can_extend_character_limit", "allowed_to_extend_character_limit", "next_character_count_reset_unix", "voice_limit", "max_voice_add_edits", "voice_add_edit_counter", "professional_voice_limit", "can_extend_voice_limit", "can_use_instant_voice_cloning", "can_use_professional_voice_cloning", "currency", "status", "next_invoice", "has_open_invoices", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        next_invoice: 'InvoiceResponseModel',
        can_use_instant_voice_cloning: typing.Union[MetaOapg.properties.can_use_instant_voice_cloning, bool, ],
        character_limit: typing.Union[MetaOapg.properties.character_limit, decimal.Decimal, int, ],
        allowed_to_extend_character_limit: typing.Union[MetaOapg.properties.allowed_to_extend_character_limit, bool, ],
        next_character_count_reset_unix: typing.Union[MetaOapg.properties.next_character_count_reset_unix, decimal.Decimal, int, ],
        can_extend_character_limit: typing.Union[MetaOapg.properties.can_extend_character_limit, bool, ],
        voice_limit: typing.Union[MetaOapg.properties.voice_limit, decimal.Decimal, int, ],
        tier: typing.Union[MetaOapg.properties.tier, str, ],
        can_extend_voice_limit: typing.Union[MetaOapg.properties.can_extend_voice_limit, bool, ],
        can_use_professional_voice_cloning: typing.Union[MetaOapg.properties.can_use_professional_voice_cloning, bool, ],
        voice_add_edit_counter: typing.Union[MetaOapg.properties.voice_add_edit_counter, decimal.Decimal, int, ],
        has_open_invoices: typing.Union[MetaOapg.properties.has_open_invoices, bool, ],
        max_voice_add_edits: typing.Union[MetaOapg.properties.max_voice_add_edits, decimal.Decimal, int, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        professional_voice_limit: typing.Union[MetaOapg.properties.professional_voice_limit, decimal.Decimal, int, ],
        character_count: typing.Union[MetaOapg.properties.character_count, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExtendedSubscriptionResponseModel':
        return super().__new__(
            cls,
            *args,
            next_invoice=next_invoice,
            can_use_instant_voice_cloning=can_use_instant_voice_cloning,
            character_limit=character_limit,
            allowed_to_extend_character_limit=allowed_to_extend_character_limit,
            next_character_count_reset_unix=next_character_count_reset_unix,
            can_extend_character_limit=can_extend_character_limit,
            voice_limit=voice_limit,
            tier=tier,
            can_extend_voice_limit=can_extend_voice_limit,
            can_use_professional_voice_cloning=can_use_professional_voice_cloning,
            voice_add_edit_counter=voice_add_edit_counter,
            has_open_invoices=has_open_invoices,
            max_voice_add_edits=max_voice_add_edits,
            currency=currency,
            professional_voice_limit=professional_voice_limit,
            character_count=character_count,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from eleven_labs_python_sdk.model.invoice_response_model import InvoiceResponseModel
